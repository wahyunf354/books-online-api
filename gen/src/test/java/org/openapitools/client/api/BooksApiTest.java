/*
 * Books Online
 * Rest API Books Online sebuah aplikasi yang<br> dapat meminjami kita buku dan kita juga bisa beli buku
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: wahyunurfadillah313@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BookDetailResponse;
import org.openapitools.client.model.BooksResponse;
import org.openapitools.client.model.CreateBookResponse;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineResponse201;
import org.openapitools.client.model.InlineResponse2011;
import org.openapitools.client.model.InlineResponse400;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BooksApi
 */
@Ignore
public class BooksApiTest {

    private final BooksApi api = new BooksApi();

    
    /**
     * mengambil semua koleksi buku
     *
     * Koleksi buku yang diambil dapat berasal dari pihak ketiga, atau berasal dari penulis. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void collectionBooksTest() throws ApiException {
        String category = null;
        String searchString = null;
        Integer skip = null;
        Integer limit = null;
        BooksResponse response = api.collectionBooks(category, searchString, skip, limit);

        // TODO: test validations
    }
    
    /**
     * Membuat buku baru dari user penulis
     *
     * Membuat buku baru hanya dapat dilakukan oleh user yang mendaftar sebagai penulis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBookTest() throws ApiException {
        String title = null;
        Integer bookTypeId = null;
        String categoryId = null;
        Integer price = null;
        Integer userId = null;
        String description = null;
        Object image = null;
        Integer pageCount = null;
        CreateBookResponse response = api.createBook(title, bookTypeId, categoryId, price, userId, description, image, pageCount);

        // TODO: test validations
    }
    
    /**
     * Mengambil satu buku dengan detail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOneBookTest() throws ApiException {
        BookDetailResponse response = api.getOneBook();

        // TODO: test validations
    }
    
    /**
     * Membuat tipe buku
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1BooktypesPostTest() throws ApiException {
        InlineObject1 inlineObject1 = null;
        InlineResponse201 response = api.v1BooktypesPost(inlineObject1);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1CategoriesPostTest() throws ApiException {
        InlineObject2 inlineObject2 = null;
        InlineResponse2011 response = api.v1CategoriesPost(inlineObject2);

        // TODO: test validations
    }
    
}
