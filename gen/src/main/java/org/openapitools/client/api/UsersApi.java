/*
 * Books Online
 * Rest API Books Online sebuah aplikasi yang<br> dapat meminjami kita buku dan kita juga bisa beli buku
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: wahyunurfadillah313@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.InlineResponse2012;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.RegisterRequest;
import org.openapitools.client.model.UserDetailResponse;
import org.openapitools.client.model.UserProfileResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for uplaodProfileId
     * @param userId  (optional)
     * @param image  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response berhasil mengupload profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> respon ketika request yang diberikan bermasalah </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> respon ketika terjadi masalah di server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uplaodProfileIdCall(Integer userId, File image, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uplaodProfileIdValidateBeforeCall(Integer userId, File image, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = uplaodProfileIdCall(userId, image, _callback);
        return localVarCall;

    }

    /**
     * untuk upload profile user
     * untuk melakukan upload harus mencantumkan header authentication dengan token
     * @param userId  (optional)
     * @param image  (optional)
     * @return UserProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response berhasil mengupload profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> respon ketika request yang diberikan bermasalah </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> respon ketika terjadi masalah di server </td><td>  -  </td></tr>
     </table>
     */
    public UserProfileResponse uplaodProfileId(Integer userId, File image) throws ApiException {
        ApiResponse<UserProfileResponse> localVarResp = uplaodProfileIdWithHttpInfo(userId, image);
        return localVarResp.getData();
    }

    /**
     * untuk upload profile user
     * untuk melakukan upload harus mencantumkan header authentication dengan token
     * @param userId  (optional)
     * @param image  (optional)
     * @return ApiResponse&lt;UserProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response berhasil mengupload profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> respon ketika request yang diberikan bermasalah </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> respon ketika terjadi masalah di server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserProfileResponse> uplaodProfileIdWithHttpInfo(Integer userId, File image) throws ApiException {
        okhttp3.Call localVarCall = uplaodProfileIdValidateBeforeCall(userId, image, null);
        Type localVarReturnType = new TypeToken<UserProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * untuk upload profile user (asynchronously)
     * untuk melakukan upload harus mencantumkan header authentication dengan token
     * @param userId  (optional)
     * @param image  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> response berhasil mengupload profile </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> respon ketika request yang diberikan bermasalah </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> respon ketika terjadi masalah di server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uplaodProfileIdAsync(Integer userId, File image, final ApiCallback<UserProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uplaodProfileIdValidateBeforeCall(userId, image, _callback);
        Type localVarReturnType = new TypeToken<UserProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UsersIdGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mengambalikan response body berupa data users secara lengkap </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersIdGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/users/:id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UsersIdGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1UsersIdGetCall(_callback);
        return localVarCall;

    }

    /**
     * Mendapatkan data detail user
     * Untuk mendapatkan data detail user maka harus memberi authentication di header dengan token
     * @return UserDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mengambalikan response body berupa data users secara lengkap </td><td>  -  </td></tr>
     </table>
     */
    public UserDetailResponse v1UsersIdGet() throws ApiException {
        ApiResponse<UserDetailResponse> localVarResp = v1UsersIdGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Mendapatkan data detail user
     * Untuk mendapatkan data detail user maka harus memberi authentication di header dengan token
     * @return ApiResponse&lt;UserDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mengambalikan response body berupa data users secara lengkap </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDetailResponse> v1UsersIdGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1UsersIdGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mendapatkan data detail user (asynchronously)
     * Untuk mendapatkan data detail user maka harus memberi authentication di header dengan token
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Mengambalikan response body berupa data users secara lengkap </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersIdGetAsync(final ApiCallback<UserDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UsersIdGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UsersLoginPost
     * @param loginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Untuk melakukan login users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersLoginPostCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loginRequest;

        // create path and map variables
        String localVarPath = "/v1/users/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UsersLoginPostValidateBeforeCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loginRequest' is set
        if (loginRequest == null) {
            throw new ApiException("Missing the required parameter 'loginRequest' when calling v1UsersLoginPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UsersLoginPostCall(loginRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint untuk melakukan login users
     * 
     * @param loginRequest  (required)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Untuk melakukan login users </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse v1UsersLoginPost(LoginRequest loginRequest) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = v1UsersLoginPostWithHttpInfo(loginRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint untuk melakukan login users
     * 
     * @param loginRequest  (required)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Untuk melakukan login users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> v1UsersLoginPostWithHttpInfo(LoginRequest loginRequest) throws ApiException {
        okhttp3.Call localVarCall = v1UsersLoginPostValidateBeforeCall(loginRequest, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint untuk melakukan login users (asynchronously)
     * 
     * @param loginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Untuk melakukan login users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersLoginPostAsync(LoginRequest loginRequest, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UsersLoginPostValidateBeforeCall(loginRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UsersRegisterPost
     * @param registerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Berhasil membuat user baru </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersRegisterPostCall(RegisterRequest registerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registerRequest;

        // create path and map variables
        String localVarPath = "/v1/users/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UsersRegisterPostValidateBeforeCall(RegisterRequest registerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registerRequest' is set
        if (registerRequest == null) {
            throw new ApiException("Missing the required parameter 'registerRequest' when calling v1UsersRegisterPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UsersRegisterPostCall(registerRequest, _callback);
        return localVarCall;

    }

    /**
     * Endpoint untuk membuat user baru atau register
     * Endpoint ini digunakan untuk mendaftarkan user baru sebagai user pembaca atau penulis
     * @param registerRequest  (required)
     * @return InlineResponse2012
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Berhasil membuat user baru </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2012 v1UsersRegisterPost(RegisterRequest registerRequest) throws ApiException {
        ApiResponse<InlineResponse2012> localVarResp = v1UsersRegisterPostWithHttpInfo(registerRequest);
        return localVarResp.getData();
    }

    /**
     * Endpoint untuk membuat user baru atau register
     * Endpoint ini digunakan untuk mendaftarkan user baru sebagai user pembaca atau penulis
     * @param registerRequest  (required)
     * @return ApiResponse&lt;InlineResponse2012&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Berhasil membuat user baru </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2012> v1UsersRegisterPostWithHttpInfo(RegisterRequest registerRequest) throws ApiException {
        okhttp3.Call localVarCall = v1UsersRegisterPostValidateBeforeCall(registerRequest, null);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint untuk membuat user baru atau register (asynchronously)
     * Endpoint ini digunakan untuk mendaftarkan user baru sebagai user pembaca atau penulis
     * @param registerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Berhasil membuat user baru </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UsersRegisterPostAsync(RegisterRequest registerRequest, final ApiCallback<InlineResponse2012> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UsersRegisterPostValidateBeforeCall(registerRequest, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2012>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
