name: unit test golang
on:
  push:
    branches:
      - 'master'
      - 'ci'
  pull_request:
    branches:
      - 'master'

jobs:
#  job 1: create config
  create-config:
    name: do create config file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: run echo
        env:
          CONFIG: ${{ secrets.CONFIG }}
        run: |
          echo "$CONFIG" > ./config.json
          chmod 777 ./config.json
          pwd
          ls

#  job 2: unit test
  unit-test:
    name: do unit test to project go
    runs-on: ubuntu-latest
    needs: create-config
    steps:
    - name: setup github action (CI)
      uses: actions/checkout@v2
    - name: setup golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: running unit test
      run: go test ./... -cover

# job 3: build push docker
  build-push-docker:
    name: "Build image and push register"
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - uses: actions/checkout@v2
      - name: build docker
        run: docker build -t wahyunf354/books_online:1.0.0 .
      - name: login registry docker hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: push docker hub
        run: docker push wahyunf354/books_online:1.0.0

# job 4: deploy to ec2
  deployment-ec2:
    name: "Deploy to ec2 from registry docker hub"
    runs-on: ubuntu-latest
    needs: build-push-docker
    steps:
      - uses: actions/checkout@v2
      - name: configuration SSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/books_online.pem
          chmod 400 ~/.ssh/books_online.pem
          cat >>~/.ssh/config <<END
          Host development
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/books_online.pem
            StrictHostKeyChecking=no
          END
      - name: Connect EC2 & Remove All Container & Pull from Registry & Start
        run: ssh development 'docker rm -f $(docker ps -a -q) && docker pull wahyunf354/books_online:1.0.0 && docker run -d -p 8080:8080 --name=books_online wahyunf354/books_online:1.0.0'

