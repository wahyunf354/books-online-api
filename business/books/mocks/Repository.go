// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	books "books_online_api/business/books"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: ctx, domain
func (_m *Repository) CreateBook(ctx context.Context, domain books.Domain) (books.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, books.Domain) books.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, books.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields: ctx, domain
func (_m *Repository) GetBooks(ctx context.Context, domain books.Domain) ([]books.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 []books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, books.Domain) []books.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, books.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneBook provides a mock function with given fields: ctx, domain
func (_m *Repository) GetOneBook(ctx context.Context, domain books.Domain) (books.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 books.Domain
	if rf, ok := ret.Get(0).(func(context.Context, books.Domain) books.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(books.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, books.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
